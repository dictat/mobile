// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'user_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

User _$UserFromJson(Map<String, dynamic> json) => User(
      id: json['id'] as int,
      avatar: json['avatar'] as String?,
      username: json['username'] as String,
      gender: json['gender'] as String,
      birthday: json['birthday'] as String,
      age: json['age'] as int,
      location: json['location'] as String?,
      profile: json['profile'] as String,
      isAvailable: json['isAvailable'] as bool,
      status: json['status'] as String,
      isUser: json['isUser'] as bool,
      introduction: json['introduction'] as String,
      unread: json['unread'] as int,
      isPremium: json['isPremium'] as bool,
      isCheer: json['isCheer'] as bool,
      point: json['point'] as int,
      hometown: json['hometown'] as String,
      height: json['height'] as int,
      interest: json['interest'] as String,
      education: json['education'] as String,
      marriageStatus: json['marriageStatus'] as String,
      tabacco: json['tabacco'] as String,
      sake: json['sake'] as String,
      familyStatus: json['familyStatus'] as String,
      newUser: json['newUser'] as bool,
      isAgeVerified: json['isAgeVerified'] as bool,
      isSalaryVerified: json['isSalaryVerified'] as bool,
      isFootprintEnable: json['isFootprintEnable'] as bool,
      isPrivateMode: json['isPrivateMode'] as bool,
      lastActivedAt: json['lastActivedAt'] as String,
      hobby: json['hobby'] as String,
      isPhoneVerified: json['isPhoneVerified'] as bool,
      frequentlyPlace: json['frequentlyPlace'] as String,
      holiday: json['holiday'] as String,
      annualIncome: json['annualIncome'] as String,
      profession: json['profession'] as String,
      resident: json['resident'] as String,
      personalityType: json['personalityType'] as String,
      tweet: json['tweet'] as String,
      lat: json['lat'] as String?,
      lng: json['lng'] as String?,
      dreamFuture: json['dreamFuture'] as String,
      screenshotInLastMonth: json['screenshotInLastMonth'] as int,
      premiumExp: json['premiumExp'] as String,
      cheerExp: json['cheerExp'] as String,
      deleted: json['deleted'] as bool,
      referalCode: json['referalCode'] as String,
      isPrivate: json['isPrivate'] as bool,
      sexual:
          (json['sexual'] as List<dynamic>).map((e) => e as String).toList(),
      weight: json['weight'] as int,
      child: json['child'] as String,
      lastReadFootprint: json['lastReadFootprint'] as String,
      lastReadAction: json['lastReadAction'] as String,
      isHiddenTweet: json['isHiddenTweet'] as bool,
      recruit: json['recruit'] as String,
      avatars: (json['avatars'] as List<dynamic>)
          .map((e) => Avatars.fromJson(e as Map<String, dynamic>))
          .toList(),
      totalCheer: json['totalCheer'] as String,
      reportCount: json['reportCount'] as String,
      liked: json['liked'] as bool,
      likedBack: json['likedBack'] as bool,
      matched: json['matched'] as bool,
      likes: json['likes'] as int,
      createDate: json['createDate'] as String,
      updateDate: json['updateDate'] as String,
      userNote: json['userNote'] as String,
    );

Map<String, dynamic> _$UserToJson(User instance) => <String, dynamic>{
      'id': instance.id,
      'avatar': instance.avatar,
      'username': instance.username,
      'gender': instance.gender,
      'birthday': instance.birthday,
      'age': instance.age,
      'location': instance.location,
      'profile': instance.profile,
      'isAvailable': instance.isAvailable,
      'status': instance.status,
      'isUser': instance.isUser,
      'introduction': instance.introduction,
      'unread': instance.unread,
      'isPremium': instance.isPremium,
      'isCheer': instance.isCheer,
      'point': instance.point,
      'hometown': instance.hometown,
      'height': instance.height,
      'interest': instance.interest,
      'education': instance.education,
      'marriageStatus': instance.marriageStatus,
      'tabacco': instance.tabacco,
      'sake': instance.sake,
      'familyStatus': instance.familyStatus,
      'newUser': instance.newUser,
      'isAgeVerified': instance.isAgeVerified,
      'isSalaryVerified': instance.isSalaryVerified,
      'isFootprintEnable': instance.isFootprintEnable,
      'isPrivateMode': instance.isPrivateMode,
      'lastActivedAt': instance.lastActivedAt,
      'createDate': instance.createDate,
      'updateDate': instance.updateDate,
      'hobby': instance.hobby,
      'isPhoneVerified': instance.isPhoneVerified,
      'frequentlyPlace': instance.frequentlyPlace,
      'holiday': instance.holiday,
      'annualIncome': instance.annualIncome,
      'profession': instance.profession,
      'resident': instance.resident,
      'personalityType': instance.personalityType,
      'tweet': instance.tweet,
      'lat': instance.lat,
      'lng': instance.lng,
      'dreamFuture': instance.dreamFuture,
      'screenshotInLastMonth': instance.screenshotInLastMonth,
      'premiumExp': instance.premiumExp,
      'cheerExp': instance.cheerExp,
      'deleted': instance.deleted,
      'referalCode': instance.referalCode,
      'isPrivate': instance.isPrivate,
      'sexual': instance.sexual,
      'weight': instance.weight,
      'child': instance.child,
      'lastReadFootprint': instance.lastReadFootprint,
      'lastReadAction': instance.lastReadAction,
      'isHiddenTweet': instance.isHiddenTweet,
      'recruit': instance.recruit,
      'avatars': instance.avatars.map((e) => e.toJson()).toList(),
      'totalCheer': instance.totalCheer,
      'reportCount': instance.reportCount,
      'liked': instance.liked,
      'likedBack': instance.likedBack,
      'matched': instance.matched,
      'userNote': instance.userNote,
      'likes': instance.likes,
    };
